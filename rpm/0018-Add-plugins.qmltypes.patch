From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martin Kampas <martin.kampas@jolla.com>
Date: Fri, 27 Jan 2023 10:56:03 +0100
Subject: [PATCH] Add plugins.qmltypes

---
 src/imports/CMakeLists.txt   |   6 +
 src/imports/plugins.qmltypes | 635 +++++++++++++++++++++++++++++++++++
 2 files changed, 641 insertions(+)
 create mode 100644 src/imports/plugins.qmltypes

diff --git a/src/imports/CMakeLists.txt b/src/imports/CMakeLists.txt
index 85f9862..79b83c4 100644
--- a/src/imports/CMakeLists.txt
+++ b/src/imports/CMakeLists.txt
@@ -21,3 +21,9 @@ target_link_libraries(bluezqtextensionplugin
 )
 
 ecm_finalize_qml_module(bluezqtextensionplugin DESTINATION ${KDE_INSTALL_QMLDIR})
+
+install(FILES plugins.qmltypes DESTINATION ${QML_INSTALL_DIR}/org/kde/bluezqt)
+
+add_custom_target(qmltypes
+  COMMAND qmlplugindump -nonrelocatable org.kde.bluezqt 1.0 > plugins.qmltypes
+  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
diff --git a/src/imports/plugins.qmltypes b/src/imports/plugins.qmltypes
new file mode 100644
index 0000000..8fb94f1
--- /dev/null
+++ b/src/imports/plugins.qmltypes
@@ -0,0 +1,635 @@
+import QtQuick.tooling 1.2
+
+// This file describes the plugin-supplied types contained in the library.
+// It is used for QML tooling purposes only.
+//
+// This file was auto-generated by:
+// 'qmlplugindump -nonrelocatable org.kde.bluezqt 1.0'
+
+Module {
+    dependencies: ["QtQuick 2.0"]
+    Component {
+        name: "BluezQt::Manager"
+        prototype: "QObject"
+        Property { name: "initialized"; type: "bool"; isReadonly: true }
+        Property { name: "operational"; type: "bool"; isReadonly: true }
+        Property { name: "bluetoothOperational"; type: "bool"; isReadonly: true }
+        Property { name: "bluetoothBlocked"; type: "bool" }
+        Property { name: "monitorObjectManagerInterfaces"; type: "bool" }
+        Property { name: "usableAdapter"; type: "AdapterPtr"; isReadonly: true }
+        Property { name: "adapters"; type: "QList<AdapterPtr>"; isReadonly: true }
+        Property { name: "devices"; type: "QList<DevicePtr>"; isReadonly: true }
+        Property { name: "rfkill"; type: "Rfkill"; isReadonly: true; isPointer: true }
+        Signal {
+            name: "operationalChanged"
+            Parameter { name: "operational"; type: "bool" }
+        }
+        Signal {
+            name: "bluetoothOperationalChanged"
+            Parameter { name: "operational"; type: "bool" }
+        }
+        Signal {
+            name: "bluetoothBlockedChanged"
+            Parameter { name: "blocked"; type: "bool" }
+        }
+        Signal {
+            name: "monitorObjectManagerInterfacesChanged"
+            Parameter { name: "enabled"; type: "bool" }
+        }
+        Signal {
+            name: "adapterAdded"
+            Parameter { name: "adapter"; type: "AdapterPtr" }
+        }
+        Signal {
+            name: "adapterRemoved"
+            Parameter { name: "adapter"; type: "AdapterPtr" }
+        }
+        Signal {
+            name: "adapterChanged"
+            Parameter { name: "adapter"; type: "AdapterPtr" }
+        }
+        Signal {
+            name: "deviceAdded"
+            Parameter { name: "device"; type: "DevicePtr" }
+        }
+        Signal {
+            name: "deviceRemoved"
+            Parameter { name: "device"; type: "DevicePtr" }
+        }
+        Signal {
+            name: "deviceChanged"
+            Parameter { name: "device"; type: "DevicePtr" }
+        }
+        Signal {
+            name: "usableAdapterChanged"
+            Parameter { name: "adapter"; type: "AdapterPtr" }
+        }
+        Signal { name: "allAdaptersRemoved" }
+    }
+    Component {
+        name: "BluezQt::PendingCall"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/PendingCall 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Enum {
+            name: "Error"
+            values: {
+                "NoError": 0,
+                "NotReady": 1,
+                "Failed": 2,
+                "Rejected": 3,
+                "Canceled": 4,
+                "InvalidArguments": 5,
+                "AlreadyExists": 6,
+                "DoesNotExist": 7,
+                "InProgress": 8,
+                "NotInProgress": 9,
+                "AlreadyConnected": 10,
+                "ConnectFailed": 11,
+                "NotConnected": 12,
+                "NotSupported": 13,
+                "NotAuthorized": 14,
+                "AuthenticationCanceled": 15,
+                "AuthenticationFailed": 16,
+                "AuthenticationRejected": 17,
+                "AuthenticationTimeout": 18,
+                "ConnectionAttemptFailed": 19,
+                "InvalidLength": 20,
+                "NotPermitted": 21,
+                "DBusError": 98,
+                "InternalError": 99,
+                "UnknownError": 100
+            }
+        }
+        Property { name: "value"; type: "QVariant"; isReadonly: true }
+        Property { name: "values"; type: "QVariantList"; isReadonly: true }
+        Property { name: "error"; type: "int"; isReadonly: true }
+        Property { name: "errorText"; type: "string"; isReadonly: true }
+        Property { name: "isFinished"; type: "bool"; isReadonly: true }
+        Property { name: "userData"; type: "QVariant" }
+        Signal {
+            name: "finished"
+            Parameter { name: "call"; type: "PendingCall"; isPointer: true }
+        }
+    }
+    Component {
+        name: "BluezQt::Rfkill"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Rfkill 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Enum {
+            name: "State"
+            values: {
+                "Unblocked": 0,
+                "SoftBlocked": 1,
+                "HardBlocked": 2,
+                "Unknown": 3
+            }
+        }
+        Property { name: "state"; type: "State"; isReadonly: true }
+        Signal {
+            name: "stateChanged"
+            Parameter { name: "state"; type: "State" }
+        }
+    }
+    Component {
+        name: "DeclarativeAdapter"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Adapter 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Property { name: "ubi"; type: "string"; isReadonly: true }
+        Property { name: "address"; type: "string"; isReadonly: true }
+        Property { name: "name"; type: "string" }
+        Property { name: "systemName"; type: "string"; isReadonly: true }
+        Property { name: "adapterClass"; type: "uint"; isReadonly: true }
+        Property { name: "powered"; type: "bool" }
+        Property { name: "discoverable"; type: "bool" }
+        Property { name: "discoverableTimeout"; type: "uint" }
+        Property { name: "pairable"; type: "bool" }
+        Property { name: "pairableTimeout"; type: "uint" }
+        Property { name: "discovering"; type: "bool"; isReadonly: true }
+        Property { name: "uuids"; type: "QStringList"; isReadonly: true }
+        Property { name: "modalias"; type: "string"; isReadonly: true }
+        Property { name: "devices"; type: "DeclarativeDevice"; isList: true; isReadonly: true }
+        Property { name: "connected"; type: "bool"; isReadonly: true }
+        Signal {
+            name: "adapterRemoved"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "adapterChanged"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "nameChanged"
+            Parameter { name: "name"; type: "string" }
+        }
+        Signal {
+            name: "systemNameChanged"
+            Parameter { name: "name"; type: "string" }
+        }
+        Signal {
+            name: "adapterClassChanged"
+            Parameter { name: "adapterClass"; type: "uint" }
+        }
+        Signal {
+            name: "poweredChanged"
+            Parameter { name: "powered"; type: "bool" }
+        }
+        Signal {
+            name: "discoverableChanged"
+            Parameter { name: "discoverable"; type: "bool" }
+        }
+        Signal {
+            name: "discoverableTimeoutChanged"
+            Parameter { name: "timeout"; type: "uint" }
+        }
+        Signal {
+            name: "pairableChanged"
+            Parameter { name: "pairable"; type: "bool" }
+        }
+        Signal {
+            name: "pairableTimeoutChanged"
+            Parameter { name: "timeout"; type: "uint" }
+        }
+        Signal {
+            name: "discoveringChanged"
+            Parameter { name: "discovering"; type: "bool" }
+        }
+        Signal {
+            name: "uuidsChanged"
+            Parameter { name: "uuids"; type: "QStringList" }
+        }
+        Signal {
+            name: "modaliasChanged"
+            Parameter { name: "modalias"; type: "string" }
+        }
+        Signal {
+            name: "deviceFound"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "deviceRemoved"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "deviceChanged"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "devicesChanged"
+            Parameter { name: "devices"; type: "DeclarativeDevice"; isList: true }
+        }
+        Signal {
+            name: "connectedChanged"
+            Parameter { name: "connected"; type: "bool" }
+        }
+        Method {
+            name: "deviceForAddress"
+            type: "DeclarativeDevice*"
+            Parameter { name: "address"; type: "string" }
+        }
+        Method { name: "startDiscovery"; type: "BluezQt::PendingCall*" }
+        Method { name: "stopDiscovery"; type: "BluezQt::PendingCall*" }
+        Method {
+            name: "removeDevice"
+            type: "BluezQt::PendingCall*"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+    }
+    Component {
+        name: "DeclarativeBattery"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Battery 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Property { name: "percentage"; type: "int"; isReadonly: true }
+        Signal {
+            name: "percentageChanged"
+            Parameter { name: "percentage"; type: "int" }
+        }
+    }
+    Component {
+        name: "DeclarativeDevice"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Device 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Property { name: "ubi"; type: "string"; isReadonly: true }
+        Property { name: "address"; type: "string"; isReadonly: true }
+        Property { name: "name"; type: "string" }
+        Property { name: "friendlyName"; type: "string"; isReadonly: true }
+        Property { name: "remoteName"; type: "string"; isReadonly: true }
+        Property { name: "deviceClass"; type: "uint"; isReadonly: true }
+        Property { name: "type"; type: "BluezQt::Device::Type"; isReadonly: true }
+        Property { name: "appearance"; type: "ushort"; isReadonly: true }
+        Property { name: "icon"; type: "string"; isReadonly: true }
+        Property { name: "paired"; type: "bool"; isReadonly: true }
+        Property { name: "trusted"; type: "bool" }
+        Property { name: "blocked"; type: "bool" }
+        Property { name: "legacyPairing"; type: "bool"; isReadonly: true }
+        Property { name: "rssi"; type: "short"; isReadonly: true }
+        Property { name: "connected"; type: "bool"; isReadonly: true }
+        Property { name: "uuids"; type: "QStringList"; isReadonly: true }
+        Property { name: "modalias"; type: "string"; isReadonly: true }
+        Property { name: "battery"; type: "DeclarativeBattery"; isReadonly: true; isPointer: true }
+        Property { name: "input"; type: "DeclarativeInput"; isReadonly: true; isPointer: true }
+        Property {
+            name: "mediaPlayer"
+            type: "DeclarativeMediaPlayer"
+            isReadonly: true
+            isPointer: true
+        }
+        Property { name: "adapter"; type: "DeclarativeAdapter"; isReadonly: true; isPointer: true }
+        Signal {
+            name: "deviceRemoved"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "deviceChanged"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "nameChanged"
+            Parameter { name: "name"; type: "string" }
+        }
+        Signal {
+            name: "friendlyNameChanged"
+            Parameter { name: "friendlyName"; type: "string" }
+        }
+        Signal {
+            name: "remoteNameChanged"
+            Parameter { name: "remoteName"; type: "string" }
+        }
+        Signal {
+            name: "deviceClassChanged"
+            Parameter { name: "deviceClass"; type: "uint" }
+        }
+        Signal {
+            name: "typeChanged"
+            Parameter { name: "type"; type: "BluezQt::Device::Type" }
+        }
+        Signal {
+            name: "appearanceChanged"
+            Parameter { name: "appearance"; type: "ushort" }
+        }
+        Signal {
+            name: "iconChanged"
+            Parameter { name: "icon"; type: "string" }
+        }
+        Signal {
+            name: "pairedChanged"
+            Parameter { name: "paired"; type: "bool" }
+        }
+        Signal {
+            name: "trustedChanged"
+            Parameter { name: "trusted"; type: "bool" }
+        }
+        Signal {
+            name: "blockedChanged"
+            Parameter { name: "blocked"; type: "bool" }
+        }
+        Signal {
+            name: "legacyPairingChanged"
+            Parameter { name: "legacyPairing"; type: "bool" }
+        }
+        Signal {
+            name: "rssiChanged"
+            Parameter { name: "rssi"; type: "short" }
+        }
+        Signal {
+            name: "connectedChanged"
+            Parameter { name: "connected"; type: "bool" }
+        }
+        Signal {
+            name: "uuidsChanged"
+            Parameter { name: "uuids"; type: "QStringList" }
+        }
+        Signal {
+            name: "modaliasChanged"
+            Parameter { name: "modalias"; type: "string" }
+        }
+        Signal {
+            name: "batteryChanged"
+            Parameter { name: "battery"; type: "DeclarativeBattery"; isPointer: true }
+        }
+        Signal {
+            name: "inputChanged"
+            Parameter { name: "input"; type: "DeclarativeInput"; isPointer: true }
+        }
+        Signal {
+            name: "mediaPlayerChanged"
+            Parameter { name: "mediaPlayer"; type: "DeclarativeMediaPlayer"; isPointer: true }
+        }
+        Method { name: "connectToDevice"; type: "BluezQt::PendingCall*" }
+        Method { name: "disconnectFromDevice"; type: "BluezQt::PendingCall*" }
+        Method {
+            name: "connectProfile"
+            type: "BluezQt::PendingCall*"
+            Parameter { name: "uuid"; type: "string" }
+        }
+        Method {
+            name: "disconnectProfile"
+            type: "BluezQt::PendingCall*"
+            Parameter { name: "uuid"; type: "string" }
+        }
+        Method { name: "pair"; type: "BluezQt::PendingCall*" }
+        Method { name: "cancelPairing"; type: "BluezQt::PendingCall*" }
+    }
+    Component {
+        name: "DeclarativeDevicesModel"
+        prototype: "QSortFilterProxyModel"
+        exports: ["org.kde.bluezqt/DevicesModelPrivate 1.0"]
+        exportMetaObjectRevisions: [0]
+        Enum {
+            name: "DeclarativeFilter"
+            values: {
+                "PairedDevices": 1,
+                "UnpairedDevices": 2,
+                "AllDevices": 3
+            }
+        }
+        Enum {
+            name: "DeclarativeFilters"
+            values: {
+                "PairedDevices": 1,
+                "UnpairedDevices": 2,
+                "AllDevices": 3
+            }
+        }
+        Property { name: "manager"; type: "DeclarativeManager"; isPointer: true }
+        Property { name: "filters"; type: "DeclarativeDevicesModel::DeclarativeFilters" }
+        Property { name: "hiddenAddresses"; type: "QStringList" }
+        Signal {
+            name: "filtersChanged"
+            Parameter { name: "filters"; type: "DeclarativeDevicesModel::DeclarativeFilters" }
+        }
+        Signal {
+            name: "hiddenAddressesChanged"
+            Parameter { name: "addresses"; type: "QStringList" }
+        }
+    }
+    Component {
+        name: "DeclarativeInput"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Input 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Property { name: "reconnectMode"; type: "BluezQt::Input::ReconnectMode"; isReadonly: true }
+        Signal {
+            name: "reconnectModeChanged"
+            Parameter { name: "mode"; type: "BluezQt::Input::ReconnectMode" }
+        }
+    }
+    Component {
+        name: "DeclarativeManager"
+        prototype: "BluezQt::Manager"
+        exports: ["org.kde.bluezqt/Manager 1.0"]
+        isCreatable: false
+        isSingleton: true
+        exportMetaObjectRevisions: [0]
+        Property { name: "usableAdapter"; type: "DeclarativeAdapter"; isReadonly: true; isPointer: true }
+        Property { name: "adapters"; type: "DeclarativeAdapter"; isList: true; isReadonly: true }
+        Property { name: "devices"; type: "DeclarativeDevice"; isList: true; isReadonly: true }
+        Signal { name: "initFinished" }
+        Signal {
+            name: "initError"
+            Parameter { name: "errorText"; type: "string" }
+        }
+        Signal {
+            name: "adapterAdded"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "adapterRemoved"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "adapterChanged"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "deviceAdded"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "deviceRemoved"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "deviceChanged"
+            Parameter { name: "device"; type: "DeclarativeDevice"; isPointer: true }
+        }
+        Signal {
+            name: "usableAdapterChanged"
+            Parameter { name: "adapter"; type: "DeclarativeAdapter"; isPointer: true }
+        }
+        Signal {
+            name: "adaptersChanged"
+            Parameter { name: "adapters"; type: "DeclarativeAdapter"; isList: true }
+        }
+        Signal {
+            name: "devicesChanged"
+            Parameter { name: "devices"; type: "DeclarativeDevice"; isList: true }
+        }
+        Method {
+            name: "adapterForAddress"
+            type: "DeclarativeAdapter*"
+            Parameter { name: "address"; type: "string" }
+        }
+        Method {
+            name: "adapterForUbi"
+            type: "DeclarativeAdapter*"
+            Parameter { name: "ubi"; type: "string" }
+        }
+        Method {
+            name: "deviceForAddress"
+            type: "DeclarativeDevice*"
+            Parameter { name: "address"; type: "string" }
+        }
+        Method {
+            name: "deviceForUbi"
+            type: "DeclarativeDevice*"
+            Parameter { name: "ubi"; type: "string" }
+        }
+    }
+    Component {
+        name: "DeclarativeMediaPlayer"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/MediaPlayer 1.0"]
+        isCreatable: false
+        exportMetaObjectRevisions: [0]
+        Property { name: "name"; type: "string"; isReadonly: true }
+        Property { name: "equalizer"; type: "BluezQt::MediaPlayer::Equalizer" }
+        Property { name: "repeat"; type: "BluezQt::MediaPlayer::Repeat" }
+        Property { name: "shuffle"; type: "BluezQt::MediaPlayer::Shuffle" }
+        Property { name: "status"; type: "BluezQt::MediaPlayer::Status"; isReadonly: true }
+        Property { name: "track"; type: "QJsonObject"; isReadonly: true }
+        Property { name: "position"; type: "uint"; isReadonly: true }
+        Signal {
+            name: "nameChanged"
+            Parameter { name: "name"; type: "string" }
+        }
+        Signal {
+            name: "equalizerChanged"
+            Parameter { name: "equalizer"; type: "BluezQt::MediaPlayer::Equalizer" }
+        }
+        Signal {
+            name: "repeatChanged"
+            Parameter { name: "repeat"; type: "BluezQt::MediaPlayer::Repeat" }
+        }
+        Signal {
+            name: "shuffleChanged"
+            Parameter { name: "shuffle"; type: "BluezQt::MediaPlayer::Shuffle" }
+        }
+        Signal {
+            name: "statusChanged"
+            Parameter { name: "status"; type: "BluezQt::MediaPlayer::Status" }
+        }
+        Signal {
+            name: "trackChanged"
+            Parameter { name: "track"; type: "QJsonObject" }
+        }
+        Signal {
+            name: "positionChanged"
+            Parameter { name: "position"; type: "uint" }
+        }
+        Method { name: "play"; type: "BluezQt::PendingCall*" }
+        Method { name: "pause"; type: "BluezQt::PendingCall*" }
+        Method { name: "stop"; type: "BluezQt::PendingCall*" }
+        Method { name: "next"; type: "BluezQt::PendingCall*" }
+        Method { name: "previous"; type: "BluezQt::PendingCall*" }
+        Method { name: "fastForward"; type: "BluezQt::PendingCall*" }
+        Method { name: "rewind"; type: "BluezQt::PendingCall*" }
+    }
+    Component {
+        name: "DeclarativeServices"
+        prototype: "QObject"
+        exports: ["org.kde.bluezqt/Services 1.0"]
+        isCreatable: false
+        isSingleton: true
+        exportMetaObjectRevisions: [0]
+        Property { name: "ServiceDiscoveryServer"; type: "string"; isReadonly: true }
+        Property { name: "SerialPort"; type: "string"; isReadonly: true }
+        Property { name: "DialupNetworking"; type: "string"; isReadonly: true }
+        Property { name: "ObexObjectPush"; type: "string"; isReadonly: true }
+        Property { name: "ObexFileTransfer"; type: "string"; isReadonly: true }
+        Property { name: "Headset"; type: "string"; isReadonly: true }
+        Property { name: "AudioSource"; type: "string"; isReadonly: true }
+        Property { name: "AudioSink"; type: "string"; isReadonly: true }
+        Property { name: "AudioVideoRemoteControlTarget"; type: "string"; isReadonly: true }
+        Property { name: "AdvancedAudioDistribution"; type: "string"; isReadonly: true }
+        Property { name: "AudioVideoRemoteControl"; type: "string"; isReadonly: true }
+        Property { name: "HeadsetAudioGateway"; type: "string"; isReadonly: true }
+        Property { name: "Panu"; type: "string"; isReadonly: true }
+        Property { name: "Nap"; type: "string"; isReadonly: true }
+        Property { name: "Handsfree"; type: "string"; isReadonly: true }
+        Property { name: "HandsfreeAudioGateway"; type: "string"; isReadonly: true }
+        Property { name: "HumanInterfaceDevice"; type: "string"; isReadonly: true }
+        Property { name: "SimAccess"; type: "string"; isReadonly: true }
+        Property { name: "PhonebookAccessServer"; type: "string"; isReadonly: true }
+        Property { name: "MessageAccessServer"; type: "string"; isReadonly: true }
+        Property { name: "PnpInformation"; type: "string"; isReadonly: true }
+        Property { name: "GenericAccess"; type: "string"; isReadonly: true }
+        Property { name: "GenericAcces"; type: "string"; isReadonly: true }
+        Property { name: "GenericAttribute"; type: "string"; isReadonly: true }
+        Property { name: "ImmediateAlert"; type: "string"; isReadonly: true }
+        Property { name: "LinkLoss"; type: "string"; isReadonly: true }
+        Property { name: "TxPower"; type: "string"; isReadonly: true }
+        Property { name: "HeartRate"; type: "string"; isReadonly: true }
+    }
+    Component {
+        name: "QAbstractProxyModel"
+        prototype: "QAbstractItemModel"
+        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
+        Method {
+            name: "mapToSource"
+            type: "QModelIndex"
+            Parameter { name: "proxyIndex"; type: "QModelIndex" }
+        }
+        Method {
+            name: "mapFromSource"
+            type: "QModelIndex"
+            Parameter { name: "sourceIndex"; type: "QModelIndex" }
+        }
+        Method {
+            name: "mapSelectionToSource"
+            type: "QItemSelection"
+            Parameter { name: "selection"; type: "QItemSelection" }
+        }
+        Method {
+            name: "mapSelectionFromSource"
+            type: "QItemSelection"
+            Parameter { name: "selection"; type: "QItemSelection" }
+        }
+    }
+    Component {
+        name: "QSortFilterProxyModel"
+        prototype: "QAbstractProxyModel"
+        Property { name: "filterRegExp"; type: "QRegExp" }
+        Property { name: "filterKeyColumn"; type: "int" }
+        Property { name: "dynamicSortFilter"; type: "bool" }
+        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
+        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
+        Property { name: "isSortLocaleAware"; type: "bool" }
+        Property { name: "sortRole"; type: "int" }
+        Property { name: "filterRole"; type: "int" }
+        Method {
+            name: "setFilterRegExp"
+            Parameter { name: "pattern"; type: "string" }
+        }
+        Method {
+            name: "setFilterWildcard"
+            Parameter { name: "pattern"; type: "string" }
+        }
+        Method {
+            name: "setFilterFixedString"
+            Parameter { name: "pattern"; type: "string" }
+        }
+        Method { name: "clear" }
+        Method { name: "invalidate" }
+    }
+}
