From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bea Lam <bea.lam@jollamobile.com>
Date: Sat, 26 Nov 2016 17:20:10 +1000
Subject: [PATCH] Check for object validity in macros

If an application connects to both the statusChanged and
transferredChanged signals for a transfer, and removes its reference to
the Transfer object when statusChanged=Complete, the application
crashes as ObexTransferPrivate::propertiesChanged() attempts to emit
the transferredChanged signal immediately after the statusChanged
signal, and q.data() is no longer valid. To avoid this, check for the
validity of q.data() in macros.h.
---
 src/macros.h | 12 +++++++++---
 1 file changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/macros.h b/src/macros.h
index 408646f..4432056 100644
--- a/src/macros.h
+++ b/src/macros.h
@@ -15,21 +15,27 @@
 #define PROPERTY_CHANGED(var, type_cast, signal) \
     if (var != value.type_cast()) { \
         var = value.type_cast(); \
-        Q_EMIT q.lock()->signal(var); \
+        if (q.lock()) { \
+            Q_EMIT q.lock()->signal(var); \
+        } \
     }
 
 #define PROPERTY_CHANGED2(var, value, signal) \
     const auto &val = value; \
     if (var != val) { \
         var = val; \
-        Q_EMIT q.lock()->signal(var); \
+        if (q.lock()) { \
+            Q_EMIT q.lock()->signal(var); \
+        } \
     }
 
 // Clears property value and emit propertyChanged signal
 #define PROPERTY_INVALIDATED(var, empty, signal) \
     if (var != empty) { \
         var = empty; \
-        Q_EMIT q.lock()->signal(var); \
+        if (q.lock()) { \
+            Q_EMIT q.lock()->signal(var); \
+        } \
     }
 
 #endif // BLUEZQT_MACROS_H
