From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bea Lam <bea.lam@jollamobile.com>
Date: Sat, 26 Nov 2016 17:27:12 +1000
Subject: [PATCH] Don't connect to signals with QVariantMapMap parameters.
 Fixes JB#36800

Signals with QVariantMapMap parameters (i.e. ManagerPrivate::interfacesAdded
and ObexManagerPrivate::interfacesAdded) are not received even when
dbus-monitor indicates the signals are being sent. If the
QVariantMapMap parameter is removed, the signal is received as
expected.

This behaviour is application-dependent so I'm wondering if it is a
resurfacing of QTBUG-11485 and is dependent on the libraries used by
the application.

With this patch, the managers connect to interfacesAdded() without the
QVariantMapMap parameter, and when the signal is received, calls
DBusObjectManager::GetManagedObjects() to fetch the full list of
available interfaces, then updates the internal properties as per the
normal interfacesAdded() behaviour.
---
 src/device_p.cpp      |  6 +++---
 src/manager_p.cpp     | 43 ++++++++++++++++++++++++++++++++++++++++++-
 src/manager_p.h       |  2 ++
 src/obexmanager_p.cpp | 39 ++++++++++++++++++++++++++++++++++++++-
 src/obexmanager_p.h   |  2 ++
 5 files changed, 87 insertions(+), 5 deletions(-)

diff --git a/src/device_p.cpp b/src/device_p.cpp
index 6901664..52ca525 100644
--- a/src/device_p.cpp
+++ b/src/device_p.cpp
@@ -106,17 +106,17 @@ void DevicePrivate::interfacesAdded(const QString &path, const QVariantMapMap &i
             m_battery->d->q = m_battery.toWeakRef();
             Q_EMIT q.lock()->batteryChanged(m_battery);
             changed = true;
-        } else if (it.key() == Strings::orgBluezInput1()) {
+        } else if (it.key() == Strings::orgBluezInput1() && !m_input) {
             m_input = InputPtr(new Input(path, it.value()));
             m_input->d->q = m_input.toWeakRef();
             Q_EMIT q.lock()->inputChanged(m_input);
             changed = true;
-        } else if (it.key() == Strings::orgBluezMediaPlayer1()) {
+        } else if (it.key() == Strings::orgBluezMediaPlayer1() && !m_mediaPlayer) {
             m_mediaPlayer = MediaPlayerPtr(new MediaPlayer(path, it.value()));
             m_mediaPlayer->d->q = m_mediaPlayer.toWeakRef();
             Q_EMIT q.lock()->mediaPlayerChanged(m_mediaPlayer);
             changed = true;
-        } else if (it.key() == Strings::orgBluezMediaTransport1()) {
+        } else if (it.key() == Strings::orgBluezMediaTransport1() && !m_mediaTransport) {
             m_mediaTransport = MediaTransportPtr(new MediaTransport(path, it.value()));
             m_mediaTransport->d->q = m_mediaTransport.toWeakRef();
             Q_EMIT q.lock()->mediaTransportChanged(m_mediaTransport);
diff --git a/src/manager_p.cpp b/src/manager_p.cpp
index 2847977..2d98167 100644
--- a/src/manager_p.cpp
+++ b/src/manager_p.cpp
@@ -145,7 +145,12 @@ void ManagerPrivate::getManagedObjectsFinished(QDBusPendingCallWatcher *watcher)
         return;
     }
 
-    connect(m_dbusObjectManager, &DBusObjectManager::InterfacesAdded, this, &ManagerPrivate::interfacesAdded);
+    DBusConnection::orgBluez().connect(Strings::orgBluez(),
+                                       QStringLiteral("/"),
+                                       QStringLiteral("org.freedesktop.DBus.ObjectManager"),
+                                       QStringLiteral("InterfacesAdded"),
+                                       this,
+                                       SLOT(interfacesAddedSlot(QDBusObjectPath)));
     connect(m_dbusObjectManager, &DBusObjectManager::InterfacesRemoved, this, &ManagerPrivate::interfacesRemoved);
 
     m_loaded = true;
@@ -229,6 +234,34 @@ void ManagerPrivate::serviceUnregistered()
     Q_EMIT q->operationalChanged(false);
 }
 
+void ManagerPrivate::interfacesAddedSlot(const QDBusObjectPath &objectPath)
+{
+    Q_UNUSED(objectPath)
+
+    QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(m_dbusObjectManager->GetManagedObjects(), this);
+    connect(watcher, &QDBusPendingCallWatcher::finished, this, &ManagerPrivate::getInterfacesManagedObjectsFinished);
+}
+
+void ManagerPrivate::getInterfacesManagedObjectsFinished(QDBusPendingCallWatcher *watcher)
+{
+    const QDBusPendingReply<DBusManagerStruct> &reply = *watcher;
+    watcher->deleteLater();
+
+    if (reply.isError()) {
+        qCWarning(BLUEZQT) << "Failed to find managed objects:" << reply.error().message();
+        return;
+    }
+
+    DBusManagerStruct::const_iterator it;
+    const DBusManagerStruct &managedObjects = reply.value();
+
+    for (it = managedObjects.constBegin(); it != managedObjects.constEnd(); ++it) {
+        const QVariantMapMap &interfaces = it.value();
+
+        interfacesAdded(it.key(), interfaces);
+    }
+}
+
 void ManagerPrivate::interfacesAdded(const QDBusObjectPath &objectPath, const QVariantMapMap &interfaces)
 {
     const QString &path = objectPath.path();
@@ -328,6 +361,10 @@ void ManagerPrivate::rfkillStateChanged(Rfkill::State state)
 
 void ManagerPrivate::addAdapter(const QString &adapterPath, const QVariantMap &properties)
 {
+    if (m_adapters.contains(adapterPath)) {
+        return;
+    }
+
     AdapterPtr adapter = AdapterPtr(new Adapter(adapterPath, properties));
     adapter->d->q = adapter.toWeakRef();
     m_adapters.insert(adapterPath, adapter);
@@ -347,6 +384,10 @@ void ManagerPrivate::addAdapter(const QString &adapterPath, const QVariantMap &p
 
 void ManagerPrivate::addDevice(const QString &devicePath, const QVariantMap &properties)
 {
+    if (m_devices.contains(devicePath)) {
+        return;
+    }
+
     AdapterPtr adapter = m_adapters.value(properties.value(QStringLiteral("Adapter")).value<QDBusObjectPath>().path());
     if (!adapter) {
         return;
diff --git a/src/manager_p.h b/src/manager_p.h
index e768ef3..63b778a 100644
--- a/src/manager_p.h
+++ b/src/manager_p.h
@@ -84,6 +84,8 @@ Q_SIGNALS:
 private Q_SLOTS:
     void propertiesChanged(const QString &interface, const QVariantMap &changed, const QStringList &invalidated);
     void dummy();
+    void interfacesAddedSlot(const QDBusObjectPath &objectPath);
+    void getInterfacesManagedObjectsFinished(QDBusPendingCallWatcher *watcher);
 };
 
 } // namespace BluezQt
diff --git a/src/obexmanager_p.cpp b/src/obexmanager_p.cpp
index e299405..57690c5 100644
--- a/src/obexmanager_p.cpp
+++ b/src/obexmanager_p.cpp
@@ -94,7 +94,12 @@ void ObexManagerPrivate::load()
 
     m_dbusObjectManager = new DBusObjectManager(Strings::orgBluezObex(), QStringLiteral("/"), DBusConnection::orgBluezObex(), this);
 
-    connect(m_dbusObjectManager, &DBusObjectManager::InterfacesAdded, this, &ObexManagerPrivate::interfacesAdded);
+    DBusConnection::orgBluezObex().connect(Strings::orgBluezObex(),
+                                           QStringLiteral("/"),
+                                           QStringLiteral("org.freedesktop.DBus.ObjectManager"),
+                                           QStringLiteral("InterfacesAdded"),
+                                           this,
+                                           SLOT(interfacesAddedSlot(QDBusObjectPath)));
     connect(m_dbusObjectManager, &DBusObjectManager::InterfacesRemoved, this, &ObexManagerPrivate::interfacesRemoved);
 
     QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(m_dbusObjectManager->GetManagedObjects(), this);
@@ -191,6 +196,34 @@ void ObexManagerPrivate::serviceUnregistered()
     Q_EMIT q->operationalChanged(false);
 }
 
+void ObexManagerPrivate::interfacesAddedSlot(const QDBusObjectPath &objectPath)
+{
+    Q_UNUSED(objectPath)
+
+    QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(m_dbusObjectManager->GetManagedObjects(), this);
+    connect(watcher, &QDBusPendingCallWatcher::finished, this, &ObexManagerPrivate::getInterfacesManagedObjectsFinished);
+}
+
+void ObexManagerPrivate::getInterfacesManagedObjectsFinished(QDBusPendingCallWatcher *watcher)
+{
+    const QDBusPendingReply<DBusManagerStruct> &reply = *watcher;
+    watcher->deleteLater();
+
+    if (reply.isError()) {
+        qCWarning(BLUEZQT) << "Failed to find managed objects:" << reply.error().message();
+        return;
+    }
+
+    DBusManagerStruct::const_iterator it;
+    const DBusManagerStruct &managedObjects = reply.value();
+
+    for (it = managedObjects.constBegin(); it != managedObjects.constEnd(); ++it) {
+        const QVariantMapMap &interfaces = it.value();
+
+        interfacesAdded(it.key(), interfaces);
+    }
+}
+
 void ObexManagerPrivate::interfacesAdded(const QDBusObjectPath &objectPath, const QVariantMapMap &interfaces)
 {
     const QString &path = objectPath.path();
@@ -216,6 +249,10 @@ void ObexManagerPrivate::interfacesRemoved(const QDBusObjectPath &objectPath, co
 
 void ObexManagerPrivate::addSession(const QString &sessionPath, const QVariantMap &properties)
 {
+    if (m_sessions.contains(sessionPath)) {
+        return;
+    }
+
     ObexSessionPtr session = ObexSessionPtr(new ObexSession(sessionPath, properties));
     session->d->q = session.toWeakRef();
     m_sessions.insert(sessionPath, session);
diff --git a/src/obexmanager_p.h b/src/obexmanager_p.h
index 0fb9cb0..ede89e1 100644
--- a/src/obexmanager_p.h
+++ b/src/obexmanager_p.h
@@ -64,6 +64,8 @@ Q_SIGNALS:
 
 private Q_SLOTS:
     void dummy();
+    void interfacesAddedSlot(const QDBusObjectPath &objectPath);
+    void getInterfacesManagedObjectsFinished(QDBusPendingCallWatcher *watcher);
 };
 
 } // namespace BluezQt
